{"intro":{"title":"通过 Travis CI 部署博客到 GitHub Pages & Firebase","slug":"deploy-blog-via-gh-pages-and-firesbase-with-travis-ci","category":{"en":"Solomon","zh_CHS":"所罗门","zh_CHT":"所羅門"},"date":"2017-02-05T13:57:17.024Z","image":"https://c1.staticflickr.com/1/281/32383962500_d2294c016e_o.jpg","issue_number":3},"html":"\n\t\t<h2 >\n\t\t\t<a name=\"前言\" class=\"anchor\" href=\"#前言\">\n\t\t\t\t<span class=\"header-link\"></span>\n\t\t\t</a>前言\n\t\t</h2>\t\n\t<p>在上一篇里我介绍了我自己写的基于 Angular 的静态博客框架 Solomon。\n那么，在一个博客框架初步完成之后，下一步就是要实现博客部署。\n因为是静态博客，所以部署方面就省事了很多，只需要有免费静态页面搭建托管服务即可。\n这方面比较流行的是 <a href=\"https://pages.github.com/\">GitHub Pages</a> ，此外 Google 新推出的\n<a href=\"https://firebase.google.com/\">Firebase</a> 也是不错的选择。不过显而易见的，\nFirebase 在国内的体验并不好，所以我这里只作为一个备用方案。</p>\n<p>此外，为了避免每次更新博客都需要在有开发环境的电脑上进行，我还用了\n<a href=\"https://travis-ci.org\">Travis-CI</a> 以实现自动编译和自动部署。</p>\n\n\t\t<h2 >\n\t\t\t<a name=\"介绍\" class=\"anchor\" href=\"#介绍\">\n\t\t\t\t<span class=\"header-link\"></span>\n\t\t\t</a>介绍\n\t\t</h2>\t\n\t<p><strong>GitHub Pages</strong> 是 GitHub 推出的静态页面托管服务，可以选择 GitHub 提供的默认域名 github.io 或者是自定义域名。\n此外，GitHub Pages 还支持自动使用 Jekyll 生成网站。</p>\n<blockquote>\n<p>不过我的项目用的是 Angular ，只能直接部署 HTML 等纯静态文档了，这也是我下面选择用 Travis-CI 自动部署的原因。</p>\n</blockquote>\n<hr>\n<p><strong>Firebase</strong> 官网的介绍是：</p>\n<blockquote>\n<p>The tools and infrastructure you need to build better apps and grow successful businesses</p>\n<p>构建更出色应用和成功地扩大业务所需的工具和基础架构</p>\n</blockquote>\n<p>简单的来说，Firebase 是一个帮助开发者构建移动应用的平台，\nFirebase 适用于 Android、iOS 和 Web 平台，\n它的功能包括 <a href=\"https://firebase.google.com/docs/analytics/\">Firebase Analytics (用户分析的解决方案)</a>、\n<a href=\"https://firebase.google.com/docs/database/\">Realtime Database(实时数据库)</a>、\n<a href=\"https://firebase.google.com/docs/auth/\">Authentication(用户验证)</a>、\n<a href=\"https://firebase.google.com/docs/cloud-messaging/\">Cloud Messaging(云信息)</a> 等。</p>\n<p>这里我们用到的是 Firebase 众多的功能的其中一种：\n<a href=\"https://firebase.google.com/docs/hosting/\">Hosting(静态托管)</a> 。\n和 GitHub Pages 一样，Firebase 也提供默认域名 firebaseapp.com 和自定义域名。\n另外 Firebase Hosting 中内置了 SSL， 所以即使使用自定义域名也可以启用 HTTPS。</p>\n\n\t\t<h2 >\n\t\t\t<a name=\"初始化-amp-设置\" class=\"anchor\" href=\"#初始化-amp-设置\">\n\t\t\t\t<span class=\"header-link\"></span>\n\t\t\t</a>初始化 &amp; 设置\n\t\t</h2>\t\n\t<p>新建一个 GitHub Pages 的过程非常简单，\n只需要在你的 GitHub 上新建一个名为 <code>username.github.io</code> 的 repository。</p>\n<blockquote>\n<p>注意： <code>username</code> 部分必须和你的 GitHub Username 完全相同。</p>\n</blockquote>\n<p>然后你需要将你新建的 GitHub Pages 取回本地：</p>\n<pre><code class=\"lang-shell\">$ git clone https://github.com/username/username.github.io\n</code></pre>\n<p>将你的 HTML 等静态文件放进 <code>username.github.io</code>，接着运行</p>\n<pre><code>$ git add .\n$ git commit -m &quot;Initial commit&quot;\n$ git push -u origin master\n</code></pre><blockquote>\n<p>还没有静态文件？运行</p>\n<pre><code>$ echo &#39;&lt;p&gt;Hello World!&lt;/p&gt;&#39; &gt; index.html\n</code></pre><p>生成一个吧！</p>\n</blockquote>\n<p>最后用浏览器打开 <a href=\"https://username.github.io\">https://username.github.io</a>\n即可看到你的 GitHub Pages 已经部署好了。</p>\n<hr>\n<p>相比 GitHub Pages，Firebase 的配置相对要繁琐一些，\n首先你需要登录到 Firebase 并在 Firebase  Console 中新建一个 Project。</p>\n<p><img src=\"https://c1.staticflickr.com/1/694/32723029306_743f988ba5_o.png\" alt=\"Create A Project at Firebase\"></p>\n<p>新建好 Project 之后，让我们转到命令行，运行如下的命令，\n分别安装 firebase 工具，登录到 firebasee 和初始化：</p>\n<pre><code class=\"lang-shell\">$ npm install -g firebase-tools\n$ firebase login\n$ firebase init\n</code></pre>\n<p><img src=\"https://c1.staticflickr.com/1/296/32723030316_1c948880d5_o.png\" alt=\"Firebase Login\"></p>\n<p>在初始化界面我们依次选择:</p>\n<p>Hosting(托管) &gt; 你的项目的名字 &gt; 默认 &gt;\n填写你的需要部署的文件夹的名字(Angular 项目默认是 <code>dist</code>) &gt; 默认</p>\n<p><img src=\"https://c1.staticflickr.com/1/619/32723031336_cf21a7ca0e_o.png\" alt=\"firebase init\"></p>\n<p>完成设置之后，部署很简单了，只需要运行</p>\n<pre><code>$ firebase deploy\n</code></pre><p>即可部署到你的 firebase 上。</p>\n\n\t\t<h2 >\n\t\t\t<a name=\"自动编译\" class=\"anchor\" href=\"#自动编译\">\n\t\t\t\t<span class=\"header-link\"></span>\n\t\t\t</a>自动编译\n\t\t</h2>\t\n\t<p>尽管 GitHub Pages 和 Firebase 的部署都十分的简单：在本地生成文本后，只需要一行命令就可以部署。\n但是如我上面所说，有的时候如果我们身边没有配好开发环境的电脑的话，本地生成就成了大问题。</p>\n<p>所幸，我们可以用 Travis-CI 提供的持续整合服务来实现自动编译和自动部署。</p>\n<blockquote>\n<p><strong>Travis-CI</strong> 名字中的 CI 指的是 <strong>Continuous integration</strong>(持续整合)，\n意思是在开发时只要有变更，就会 <strong>持续整合</strong> 进主线中。</p>\n<p>要实现的自动整合，就需要有服务器持续的监听项目库的变化，\n发生变化 (例如 git commit) 时，自动运行测试和部署的脚本。</p>\n<p>Travis-CI 提供分布式的持续集成服务，用于测试在 GitHub 上托管的代码。</p>\n</blockquote>\n<p>首先，登录到 Travis-CI 并且为项目开启自动编译：</p>\n<p><img src=\"https://c1.staticflickr.com/1/620/32723031566_99ed10100b_o.png\" alt=\"enable Travis-ci\"></p>\n<p>然后，在我们的 Repo 中加入 <code>.travis.yml</code> 文件，用来描述编译的步骤。\n我的 <code>.travis.yml</code> 目前长这样：</p>\n<pre><code class=\"lang-yml\">\nlanguage: node_js\nnode_js:\n  - &quot;6.1&quot;\n\nbranches:\n  only:\n    - master\n\nbefore_script:\n  - yarn\n  - npm install -g firebase-tools\n  - npm install -g angular-cli\n\nscript:\n  - ng build --prod\n\nafter_success:\n  - firebase deploy --token $FIREBASE_TOKEN\n  - cd dist\n  - git init\n  - git config user.name &quot;PoiScript&quot;\n  - git config user.email &quot;poiscript@gmail.com&quot;\n  - git add .\n  - git commit -m &quot;Committed via Travis-CI&quot;\n  - git push -f -q https://PoiScript:$GITHUB_TOKEN@github.com/PoiScript/poiscript.github.io\n\nnotifications:\n  email:\n    on_failure: change\n    on_success: change\n</code></pre>\n<p>简单的介绍一下各项配置：</p>\n<ol>\n<li><code>language</code>: 这里是定义你的语言，而且还可以规定你的语言的版本，例如这里是 node 6.1</li>\n</ol>\n<blockquote>\n<p>选择语言版本的时候最好先到 <a href=\"https://docs.travis-ci.com/\">Travis CI User Documentation</a>\n里确定 Travis CI 是否提供。</p>\n</blockquote>\n<ol>\n<li><p><code>before_script</code>: 在这里命令会在开始编译之前运行。\n由于我的项目用的是 yarn 所以这里我直接运行 yarn 命令安装依赖。\n然后我又用 npm 全局安装了 angular-cli 和 firebase-tools， 因为接下来的编译和部署会用到他们。</p>\n</li>\n<li><p><code>script</code>: 这里是编译的命令。<code>--prod</code> 表示生产模式。</p>\n</li>\n<li><p><code>after_success</code>: 这里放编译之后运行的代码，换言之就是部署的代码。具体的内容我们放到下面讲。</p>\n</li>\n</ol>\n<p>写好 <code>.travis.yml</code> 之后，在之后的每一次更新里，Travis 都会帮你 clone 下来进行编译或测试。\n如果一切正常的话，Travis 的 Build 就会显示成 Passing。</p>\n\n\t\t<h2 >\n\t\t\t<a name=\"自动部署\" class=\"anchor\" href=\"#自动部署\">\n\t\t\t\t<span class=\"header-link\"></span>\n\t\t\t</a>自动部署\n\t\t</h2>\t\n\t<p>自动编译好了之后，接下来就需要 <strong>自动部署</strong> 了，\n为了安全起见我们当然不能直接把我的 GitHub 和 Google 密码交出去，所以我们需要 <strong>Token</strong> (令牌)。</p>\n<p>GitHub 的 Token 是在 <a href=\"https://github.com/settings/tokens\">Personal access tokens</a> 页面。\n点击 <strong>Generate New Token</strong> 之后输入这个 Token 描述(例如：Trvias-CI)，\n然后选择该 Token 的权限， 我们只选择一个 <strong>public_repo</strong> 。</p>\n<p><img src=\"https://c1.staticflickr.com/1/664/32723032236_4dde625658_o.png\" alt=\"Generate GitHub Personal access tokens\"></p>\n<p>最后点击 <strong>Generate Token</strong> 之后，就会显示出我们生成好的 GitHub 的 Token 啦。</p>\n<blockquote>\n<p>注意 Personal access tokens 出现了之后要 <strong>立即复制</strong>，因为它只会出现一次。</p>\n</blockquote>\n<p>获得 Firebase 的 Token 则是需要在命令行里运行：</p>\n<pre><code class=\"lang-shell\">$ firebase login:ci\n</code></pre>\n<p><img src=\"https://c1.staticflickr.com/1/276/32723032766_5fcb4098d7_o.png\" alt=\"Generate firebase Token\"></p>\n<p>在浏览器里验证身份之后，就可以获得你的 Token 了。</p>\n<p>那么 Token 应该怎么用呢？肯定是不能直接写到 <code>.travis.yml</code> 里的。\n所幸，Travis-CI 提供了 <strong>全局变量</strong> 的功能，在 Travis-CI 的设置界面里，我们把我们的 Token 填进去：</p>\n<p><img src=\"https://c1.staticflickr.com/1/443/32723032906_3b93de2e49_o.png\" alt=\"Set Travis-CI Environment Variables\"></p>\n<p>然后在我们的就可以通过 <code>$GITHUB_TOKEN</code>，<code>$FIREBASE_TOKEN</code> 的方式获得我们的 Token 。\n而且如果你没有勾选 <strong>Display value in build log</strong> 的话，也不会显示在 log 里：</p>\n<p><img src=\"https://c1.staticflickr.com/1/403/32764351145_e45e4c67b4_o.png\" alt=\"Hide Your Environment Variables in log \"></p>\n<p>通过 Token 部署 Firebase 也是一样简单，只需要在 <code>after_success</code> 里添加：</p>\n<pre><code>- firebase deploy --token $FIREBASE_TOKEN\n</code></pre><p>部署到 GitHub 则是这么写:</p>\n<pre><code>- cd dist\n- git init\n- git config user.name &quot;GIT_NAME&quot;\n- git config user.email &quot;GIT_EMAIL&quot;\n- git add .\n- git commit -m &quot;Committed via Travis-CI&quot;\n- git push -f -q https://username:$GITHUB_TOKEN@github.com/username/username.github.io\n</code></pre><p>在 git push 的时候，切记要加上 <code>-q</code>，不然会显示出 URL 那么你的 Token 也就泄漏了。</p>\n","bookmark":["#前言","#介绍","#初始化-amp-设置","#自动编译","#自动部署"],"next_title":"Hello World!","next_slug":"hello-world"}