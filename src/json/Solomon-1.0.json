{"intro":{"title":"Solomon 1.0","slug":"Solomon-1.0","category":{"en":"Solomon","zh_CHS":"所罗门","zh_CHT":"所羅門"},"date":"2017-01-15T16:04:11.888Z","image":"https://c1.staticflickr.com/1/385/31904456234_7a33dbb83c_o.jpg","issue_number":2},"html":"<blockquote>\n<p>题图是我给 Solomon 瞎画的一个 LOGO 。</p>\n</blockquote>\n\n\t\t<h2 >\n\t\t\t<a name=\"前言\" class=\"anchor\" href=\"#前言\">\n\t\t\t\t<span class=\"header-link\"></span>\n\t\t\t</a>前言\n\t\t</h2>\t\n\t<p>以前我的博客用的是 <a href=\"https://hexo.io/\">hexo</a> 。\n但是我用起来感觉限制还是太多，然后又尝试了一下其他的静态博客生成器，例如：<a href=\"https://gohugo.io/\">Hugo</a> 、<a href=\"https://jekyllrb.com/\">Jekyll</a> 、<a href=\"https://ghost.org/\">Ghost</a> 等，发现也不太满足我的需求。\n恰巧，Angular 2 发布了，于是我就萌生了自己写一个博客系统的想法。</p>\n<p>说干就干，repo 的名字就叫 Solomon ，和我的博客同名。</p>\n<blockquote>\n<p>如果有兴趣翻 Solomon 的 Git 历史的话，你会发现它原来是一个我给 Hexo 写的主题。 :)</p>\n</blockquote>\n\n\t\t<h2 >\n\t\t\t<a name=\"Angular-简介\" class=\"anchor\" href=\"#Angular-简介\">\n\t\t\t\t<span class=\"header-link\"></span>\n\t\t\t</a>Angular 简介\n\t\t</h2>\t\n\t<p>Angular 是 Google 开发的前端框架，据 <a href=\"https://angular.cn\">Angular 中文网</a> 介绍，其有如下功能：</p>\n<blockquote>\n<p>Angular 特性与优点：跨平台(Cross Platform)、速度与性能(Speed and Performance)、生产率(Productivity)和完整开发故事(Full Development Story)。</p>\n</blockquote>\n<p>Angular 的框架如图：</p>\n<p><img src=\"https://angular.io/resources/images/devguide/architecture/overview2.png\" alt=\"Angular 2 Overview\"></p>\n<p>图源 <a href=\"angular.io\">angular.io</a></p>\n<p>我选择 Angular 主要有一下几方面的考虑：</p>\n<ol>\n<li><p>Angular 2 框架使用 Microsoft 的 TypeScript 开发，而且官方推荐使用的语言也是 TypeScript。\nTypeScript 是 JavaScript 的 <strong>一个严格超集</strong> ，并且添加了 <strong>静态类型</strong> 和 <strong>面向对象编程</strong></p>\n</li>\n<li><p>此外，Angular 2 还集成了 Microsoft 的另外一个产品 RxJS\n(Reactive Extensions for JavaScript, JavaScript 的响应式扩展)</p>\n</li>\n<li><p>最后一点，则是 Google Developers 的 <strong>中文博客</strong> 已经正式发布，其中就包括 <a href=\"angular.io\">Angular 中文网</a></p>\n</li>\n</ol>\n\n\t\t<h2 >\n\t\t\t<a name=\"文章\" class=\"anchor\" href=\"#文章\">\n\t\t\t\t<span class=\"header-link\"></span>\n\t\t\t</a>文章\n\t\t</h2>\t\n\t<p>我的文章是通过 <strong>XHR 异步请求</strong> 获取的，传输的格式是 <strong>JSON</strong> 。\n理由如下</p>\n<ol>\n<li><p>XHR 可以实现 <strong>懒加载(lazy load)</strong></p>\n</li>\n<li><p>JSON 数据格式小</p>\n</li>\n<li><p>TypeScript(JavaScript) 可以很方便的解析 JSON</p>\n</li>\n</ol>\n<blockquote>\n<p>虽然我是用 JSON 存储了文章数据，在显示的时候用浏览器渲染，而不是像其他静态博客那样 <strong>生成 HTML 纯静态的文件</strong>。但是我的 JSON 数据是静态的而且和其他 HTML CSS JS 文件托管在一起，所以我的博客理论上讲还是一个 <strong>静态博客</strong> 。 :)</p>\n</blockquote>\n<p>我的文章的用 Markdown 写的,于是我需要先将 Markdown 渲染成 HTML 格式,然后再封装成 JSON。</p>\n<p>此外, 我的 Markdown 是单独存放的, 通过 <code>git submodule</code> 和博客的其他文件相连。</p>\n<blockquote>\n<p>将文章单独放在一个 repo 里主要是考虑到以后迁移到别的博客系统的话会方便一点，此外，我还希望文章部分和博客的代码部分能以不同的协议发布。</p>\n</blockquote>\n<p>于是我写了 <a href=\"https://github.com/PoiScript/Solomon-Post/blob/master/build.ts\">一个脚本</a> 和 Markdown 文件放在一起, 每次更新我的文章之后只要运行这个脚本就可以生成相应的 JSON 文件。此外还可以生成以日期排序的 <code>archive.json</code> 和以分类信息分类好的 <code>category.json</code> 以方便检索。</p>\n\n\t\t<h2 >\n\t\t\t<a name=\"评论\" class=\"anchor\" href=\"#评论\">\n\t\t\t\t<span class=\"header-link\"></span>\n\t\t\t</a>评论\n\t\t</h2>\t\n\t<p>评论我用的是 <strong>GitHub Issue</strong> 。\n一是 issue comment 相比其他的评论系统，可以实现更多的功能，像支持部分 <strong>Markdown</strong> 和可以进行 <strong>reaction</strong> (例如点赞、点踩之类的)。\n二是 GitHub 提供 Issue Comment 的 <strong>API</strong> ，借此我就可以实现 <strong>自定义</strong> 评论的排版。</p>\n<p>当然麻烦也是有的，一是评论者需要有 <strong>GitHub</strong> 账号，不过我想应该不是难事；二是每篇文章需要建一个 Issue 。</p>\n<p>此外，在 Angular 中调用 GitHub Issue API 的时候还有一个问题，就是获取 Reaction 的时候需要加一个 <strong>Header</strong> :</p>\n<pre><code>Accept : application/vnd.github.squirrel-girl-preview\n</code></pre><p>在 Angular 中，就需要这么写:</p>\n<pre><code class=\"lang-TypeScript\">getIssueComments(): Promise&lt;Comment[]&gt; {\n  let headers = new Headers()\n  headers.append(&#39;Accept&#39;, &#39;application/vnd.github.squirrel-girl-preview&#39;)\n  return this.http.get(url, {\n    headers: headers\n  }).toPromise()\n    .then(res =&gt; res.json() as Comment[])\n}\n</code></pre>\n<blockquote>\n<p>顺便提一下，我的评论系统中只会显示 <strong>+1</strong> 和 <strong>-1</strong> 的 Reaction，一是我觉得有这两个就够了；二是我在 <strong>Material Design Icons</strong> 里没找到另外几个比较符合 Emoji 的图标。 :(</p>\n</blockquote>\n\n\t\t<h2 >\n\t\t\t<a name=\"搜索\" class=\"anchor\" href=\"#搜索\">\n\t\t\t\t<span class=\"header-link\"></span>\n\t\t\t</a>搜索\n\t\t</h2>\t\n\t<p>搜索我用的是 <strong>GitHub Code Search</strong> 。\n使用它的主要原因和上面的评论相同，因为 GitHub 提供了相应的 <strong>API，所以可以借此实现</strong> <strong>自定义</strong> 布局。</p>\n<p>上面我提到过我的文章是用 <strong>Markdown</strong> 写的，而且也托管于 <strong>GitHub</strong> 。\n于是只要在 GitHub Code Search API 的参数中指定搜索特定的 repo 中后缀名为 <code>.md</code> 的文件即可实现搜索。</p>\n<p>此外 <strong>GitHub Code Search API</strong> 还可以返回匹配的文本的上下文，借此可以实现 <strong>搜索结果的预览</strong> 。不过和上面的 Reaction 相同，开启这个特性需要 <strong>添加一个 Header</strong> ：</p>\n<pre><code>Accept : application/vnd.github.v3.text-match+json\n</code></pre>\n\t\t<h2 >\n\t\t\t<a name=\"后语\" class=\"anchor\" href=\"#后语\">\n\t\t\t\t<span class=\"header-link\"></span>\n\t\t\t</a>后语\n\t\t</h2>\t\n\t<p>最后，整个博客系统以 <a href=\"https://github.com/PoiScript/Solomon/blob/master/LICENSE\">MIT 协议</a> 开源于 <a href=\"https://github.com/PoiScript/Solomon\">PoiScript/Solomon</a>，目前没有写文档的打算。\n不过如果有人真的想用这个博客系统的话，可以在我的 <a href=\"/about\">关于界面</a> 的选择任意一种联系方式联系我，我会尽力解答你的疑问。:)</p>\n","bookmark":["#前言","#Angular-简介","#文章","#评论","#搜索","#后语"],"previous_title":"Hello World!","previous_slug":"hello-world"}